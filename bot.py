import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# --- Configuration ---
# Bot Token from @BotFather
TOKEN = "8443628415:AAGld9KKD0x2JStEgmkqNBJqMCkGh061JI8"
# Link for "–û—Ç–∫—Ä—ã—Ç—å" and "–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã" buttons
SITE_LINK = "https://chmpmrm.flirt-hotlady.com/wdk2cxh"

# File paths for the 25 photos (assuming they are in the current directory)
PHOTO_FILES = [
    "IMG_4158.jpeg", "IMG_4157.jpeg", "IMG_4156.jpeg", "IMG_4155.jpeg", "IMG_4154.jpeg",
    "IMG_4153.jpeg", "IMG_4149.jpeg", "IMG_4148.jpeg", "IMG_4147.jpeg", "IMG_4075.jpeg",
    "IMG_4144.jpeg", "IMG_4145.jpeg", "IMG_4142.jpeg", "IMG_4141.jpeg", "IMG_4139.jpeg",
    "IMG_4136.jpeg", "IMG_4137.jpeg", "IMG_4138.jpeg", "IMG_4135.jpeg", "IMG_4134.jpeg",
    "IMG_4133.jpeg", "IMG_4128.jpeg", "IMG_4131.jpeg", "IMG_4132.jpeg", "IMG_4124.jpeg"
]

# The first photo will be used for the welcome screen
WELCOME_PHOTO = PHOTO_FILES[0]

# Data for the 25 profiles
PROFILE_DATA = [
    {"name": "–ê–Ω–Ω–∞", "text": "–¢—ã –º–Ω–µ —Å—Ä–∞–∑—É –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è‚Ä¶ –∑–∞–π–¥–∏, —è –ø–æ–∫–∞–∂—É üòâ"},
    {"name": "–ì–∞–ª–∏–Ω–∞", "text": "–ù–µ –æ–∂–∏–¥–∞–ª–∞, —á—Ç–æ –∑–¥–µ—Å—å –≤—Å—Ç—Ä–µ—á—É —Ç–∞–∫–æ–≥–æ‚Ä¶üí¶"},
    {"name": "–í–∞–ª–µ—Ä–∏—è", "text": "–Ø —Å–µ–π—á–∞—Å –¥–æ–º–∞ –æ–¥–Ω–∞ üòò"},
    {"name": "–í–∞–ª–µ–Ω—Ç–∏–Ω–∞", "text": "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤—ã–¥–µ—Ä–∂–∏—à—å –º–æ–π –≤–∑–≥–ª—è–¥? –ü–∏—à–∏ –Ω–∞ —Å–∞–π—Çüíã"},
    {"name": "–°–≤–µ—Ç–ª–∞–Ω–∞", "text": "–•–æ—á—É –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –Ω–æ –Ω–µ –∑–¥–µ—Å—å üòè"},
    {"name": "–û–ª—å–≥–∞", "text": "–ó–∞–π–¥–∏ ‚Äî —è –ø–æ–∫–∞–∂—É, —á—Ç–æ –∑–Ω–∞—á–∏—Ç ‚Äú–≤–∑—Ä–æ—Å–ª–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ‚Äùüí¶"},
    {"name": "–ï–ª–µ–Ω–∞", "text": "–ü–æ—Å–º–æ—Ç—Ä–∏, —á—Ç–æ –Ω–∞–ø–∏—à—É —Ç–µ–±–µ —Å–µ–π—á–∞—Å‚Ä¶üíå"},
    {"name": "–¢–∞—Ç—å—è–Ω–∞", "text": "–ú–æ–∂–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏–º —Ç–∞–º, –≥–¥–µ –ø–æ—Ç–∏—à–µ? –ú–æ—è –≥—Ä—É–¥—å –≥–æ–ª–∞—è"},
    {"name": "–ù–∞—Ç–∞–ª—å—è", "text": "–Ø –Ω–µ –∫—É—Å–∞—é—Å—å‚Ä¶ –µ—Å–ª–∏ –Ω–µ –ø–æ–ø—Ä–æ—Å–∏—à—å üòå"},
    {"name": "–ò—Ä–∏–Ω–∞", "text": "–°–º–æ—Ç—Ä–∏ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ‚Ä¶ –≤—Ç—è–Ω—É—Ç—å—Å—è –ª–µ–≥–∫–æ –≤ –º–æ–π 5 —Ä–∞–∑–º–µ—Äüòò"},
    {"name": "–ú–∞—Ä–∏—è", "text": "–ù–µ –æ–±–µ—â–∞—é –±—ã—Ç—å —Å–∫—Ä–æ–º–Ω–æ–π —Ö–æ—á—É üçÜ"},
    {"name": "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "text": "–£ —Ç–µ–±—è –≤–∑–≥–ª—è–¥, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç–µ—Ä—è—é –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–ø–∏—à–∏ –º–Ω–µüòâ"},
    {"name": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "text": "–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ?üçì"},
    {"name": "–ú–∞—Ä–∏–Ω–∞", "text": "–ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–π –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π"},
    {"name": "–Æ–ª–∏—è", "text": "–ù–µ –∏–≥—Ä–∞–π —Å –æ–≥–Ω—ë–º, —è —Å–µ—Ä—å—ë–∑–Ω–æ"},
    {"name": "–í–∏–∫—Ç–æ—Ä–∏—è", "text": "–°–µ–∫—É–Ω–¥—É‚Ä¶ —è —Ç–æ–ª—å–∫–æ —Ö–∞–ª–∞—Ç –ø–æ–ø—Ä–∞–≤–ª—é üòè"},
    {"name": "–ê–ª—ë–Ω–∞", "text": "–¢—ã –º–µ–Ω—è –∏—â–µ—à—å ‚Äî —è –∑–¥–µ—Å—å"},
    {"name": "–õ—é–¥–º–∏–ª–∞", "text": "–í–Ω–∏–º–∞–Ω–∏–µ! –û–ø–∞—Å–Ω–æ –¥–ª—è —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è üòå–º–æ–∏ —Ñ–æ—Ä–º—ã –æ–≥–æ–Ω—å"},
    {"name": "–ù–∞–¥—é—à–∞", "text": "–ù–µ —É–¥–µ—Ä–∂–∞–ª–∞—Å—å ‚Äî –Ω–∞–ø–∏—Å–∞–ª–∞ —Ç–µ–±–µ —Ö–æ—á—É"},
    {"name": "–ò–Ω–Ω–∞", "text": "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –º—É–∂—á–∏–Ω–∞ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫–∞–µ—Ç –∏ –≤—Ö–æ–¥–∏—Çüî•"},
    {"name": "–õ–∞—Ä–∏—Å–∞", "text": "–ù–µ —Å–º–æ—Ç—Ä–∏ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ ‚Äî –ø—Ä–∏–≤—ã–∫–Ω–µ—à—å"},
    {"name": "–í–µ—Ä–æ–Ω–∏–∫–∞", "text": "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —á–µ–º –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è? –ü–∏—à–∏ –ª—é–±–∏–º—ã–π"},
    {"name": "–ù–∏–∫–∞", "text": "–ú–Ω–µ –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω. –ú–æ–∂–µ—Ç, —ç—Ç–æ —Ç—ã?"},
    {"name": "–ù–∞—Ç–∞—à–∞", "text": "–ü—Ä–æ—Å—Ç–æ –∑–∞–π–¥–∏‚Ä¶ —è –≤—Å—ë –ø–æ–∫–∞–∂—É"},
    {"name": "–Ø–Ω–∞", "text": "–Ø –∂–¥–∞–ª–∞, –∫–æ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ —Ç—ã –ø–æ—è–≤–∏—à—å—Å—è üí´"},
]

# Cities
CITIES = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"]

# Group profiles by city (5 profiles per city)
PROFILES_PER_CITY = 5
CITY_PROFILES = {}
for i, city in enumerate(CITIES):
    start_index = i * PROFILES_PER_CITY
    end_index = start_index + PROFILES_PER_CITY
    city_profiles = []
    for j in range(PROFILES_PER_CITY):
        profile_index = start_index + j
        profile = PROFILE_DATA[profile_index]
        profile["photo"] = PHOTO_FILES[profile_index]
        city_profiles.append(profile)
    CITY_PROFILES[city] = city_profiles

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Handlers ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sends a welcome message and photo with the 'Start' button."""
    welcome_text_raw = (
        "üî• –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞—Å—Ç–æ—è—â–∏–µ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 35+! üî•\n\n"
        "üìç –ì–æ—Ä–æ–¥–∞: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ö–∞–∑–∞–Ω—å.\n\n"
        "üíØ –ì–∞—Ä–∞–Ω—Ç–∏—è: –ó–¥–µ—Å—å —Ä–µ–∞–ª—å–Ω—ã–µ –∂–µ–Ω—â–∏–Ω—ã 35+ –±–µ–∑ –±–æ—Ç–æ–≤ –∏ –ø—É—Å—Ç—ã—Ö –∞–Ω–∫–µ—Ç.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ \"–°—Ç–∞—Ä—Ç\" –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
    )
    welcome_text = escape_markdown_v2(welcome_text_raw)
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞—Ä—Ç", callback_data="show_cities")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    # Send photo with caption and button
    try:
        with open(WELCOME_PHOTO, "rb") as photo_file:
            await update.message.reply_photo(
                photo=photo_file,
                caption=welcome_text,
                reply_markup=reply_markup,
                parse_mode='MarkdownV2'
            )
    except FileNotFoundError:
        logger.error(f"Welcome photo not found: {WELCOME_PHOTO}")
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ ({WELCOME_PHOTO}).\n\n{welcome_text}",
            reply_markup=reply_markup,
            parse_mode='MarkdownV2'
        )

async def show_cities(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Shows the list of cities."""
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton(city, callback_data=f"select_city_{city}")] for city in CITIES
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=reply_markup
    )

def get_profile_keyboard(city: str, profile_index: int) -> InlineKeyboardMarkup:
    """Generates the keyboard for a profile."""
    keyboard = [
        [InlineKeyboardButton("üü¢ –°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω", url=SITE_LINK)],
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å", url=SITE_LINK)]
    ]
    # Navigation buttons
    navigation_buttons = []
    # If not the last profile, add "Next" button
    if profile_index < PROFILES_PER_CITY - 1:
        navigation_buttons.append(
            InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚è≠Ô∏è", callback_data=f"show_profile_{city}_{profile_index + 1}")
        )
    # If it's the last profile, add "–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã" button
    if profile_index == PROFILES_PER_CITY - 1:
        navigation_buttons.append(
            InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ", url=SITE_LINK)
        )
    keyboard.append(navigation_buttons)
    # Add button to go back to city selection
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="show_cities")])
    return InlineKeyboardMarkup(keyboard)

def escape_markdown_v2(text: str) -> str:
    """Helper function to escape special characters in MarkdownV2."""
    # List of special characters in MarkdownV2:
    # _, *, [, ], (, ), ~, `, >, #, +, -, =, |, {, }, ., !
    special_chars = r'_*[]()~`>#+-=|{}.!'
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

def get_profile_caption(profile: dict, city: str) -> str:
    """Generates the caption for a profile."""
    name = escape_markdown_v2(profile['name'])
    text = escape_markdown_v2(profile['text'])
    city_escaped = escape_markdown_v2(city)
    return (
        f"*{name}*\n"
        f"_{text}_\n\n"
        f"üìç –ì–æ—Ä–æ–¥: {city_escaped}"
    )

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Shows a specific profile."""
    query = update.callback_query
    await query.answer()
    try:
        # Parse callback data: "show_profile_{city}_{index}"
        parts = query.data.split('_')
        if len(parts) < 4:
            logger.error(f"Invalid callback data: {query.data}")
            await query.edit_message_caption(caption="‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
        city = parts[2]
        index_str = parts[3]
        profile_index = int(index_str)
        profiles = CITY_PROFILES.get(city)
        if not profiles or profile_index >= len(profiles):
            logger.error(f"Profile not found for city {city} at index {profile_index}")
            await query.edit_message_caption(caption="‚ùå –û—à–∏–±–∫–∞: –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        profile = profiles[profile_index]
        caption = get_profile_caption(profile, city)
        reply_markup = get_profile_keyboard(city, profile_index)
        # Prepare the new photo and caption
        try:
            with open(profile["photo"], "rb") as photo_file:
                new_media = InputMediaPhoto(
                    media=photo_file,
                    caption=caption,
                    parse_mode='MarkdownV2'
                )
                # Edit the message to change the photo, caption, and keyboard
                await query.edit_message_media(
                    media=new_media,
                    reply_markup=reply_markup
                )
        except FileNotFoundError:
            logger.error(f"Profile photo not found: {profile['photo']}")
            # If photo not found, just edit the caption and keyboard
            await query.edit_message_caption(
                caption=f"‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ\n\n{caption}",
                reply_markup=reply_markup,
                parse_mode='MarkdownV2'
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            await query.edit_message_caption(
                caption=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n\n{caption}",
                reply_markup=reply_markup,
                parse_mode='MarkdownV2'
            )
    except Exception as e:
        logger.error(f"Error in show_profile: {e}")
        await query.edit_message_caption(caption="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start")

async def select_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handles city selection and shows the first profile for that city."""
    query = update.callback_query
    await query.answer()
    try:
        # Parse callback data: "select_city_{city}"
        parts = query.data.split('_')
        if len(parts) < 3:
            logger.error(f"Invalid city callback: {query.data}")
            await query.edit_message_caption(caption="‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞")
            return
        city = parts[2]
        # Show the first profile (index 0)
        profiles = CITY_PROFILES.get(city)
        if not profiles:
            logger.error(f"City not found: {city}")
            await query.edit_message_caption(caption="‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        profile = profiles[0]
        caption = get_profile_caption(profile, city)
        reply_markup = get_profile_keyboard(city, 0)
        # Send the first profile
        try:
            with open(profile["photo"], "rb") as photo_file:
                new_media = InputMediaPhoto(
                    media=photo_file,
                    caption=caption,
                    parse_mode='MarkdownV2'
                )
                await query.edit_message_media(
                    media=new_media,
                    reply_markup=reply_markup
                )
        except FileNotFoundError:
            logger.error(f"Profile photo not found: {profile['photo']}")
            await query.edit_message_caption(
                caption=f"‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ\n\n{caption}",
                reply_markup=reply_markup,
                parse_mode='MarkdownV2'
            )
    except Exception as e:
        logger.error(f"Error in select_city: {e}")
        await query.edit_message_caption(caption="‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start")

def main() -> None:
    """Start the bot."""
    # Create the Application and pass it your bot's token.
    application = Application.builder().token(TOKEN).build()

    # on different commands - answer in Telegram
    application.add_handler(CommandHandler("start", start_command))

    # on callback queries - handle button presses
    application.add_handler(CallbackQueryHandler(show_cities, pattern="^show_cities$"))
    application.add_handler(CallbackQueryHandler(select_city, pattern="^select_city_"))
    application.add_handler(CallbackQueryHandler(show_profile, pattern="^show_profile_"))

    # Run the bot until the user presses Ctrl-C
    logger.info("Bot started. Press Ctrl-C to stop.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
